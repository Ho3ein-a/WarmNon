const express=require("express"),router=express.Router(),pagesController=require("../../controller/user/pages"),businessController=require("../../controller/user/business"),db=require("../../util/database"),bcrypt=require("bcryptjs"),isAuth=require("../../middleware/is-auth"),{check:check}=require("express-validator");router.get("/sign-in",pagesController.signInPage),router.post("/sign-in",[check("user_id").notEmpty().withMessage("لطفا نام کاربری وارد کن").isLength({min:5}).withMessage("نام کاربری وارد شده باید بیش از 5 کاراکتر یا عدد باشه").custom((s,{req:t})=>db.execute("select user_id from user").then(([e])=>{const r=[];if(e.map(e=>{r.push(e.user_id)}),r.includes(parseInt(s)))return t.body.userDuplicated=!0})),check("name").notEmpty().withMessage("لطفا نام خود را وارد کنید (بدون عدد یا کاراکتری جز حروف)").isAlpha("fa-IR",{ignore:" "}).withMessage("لطفا نام خود را فارسی وارد کنید (بدون عدد یا کاراکتری جز حروف)"),check("password").notEmpty().withMessage("رمز عبور خودتو وارد کن").isLength({min:5}).withMessage("رمز عبور وارد شده باید بیش از 5 عدد باشه").isNumeric().withMessage("رمز عبور وارد شده باید فقط شامل عدد باشه").custom((e,{req:r})=>{if(e!==r.body.confirmed_password)throw new Error("رمز عبور با تکرار آن تطابق ندارن");return!0}),check("confirmed_password").notEmpty().withMessage("تکرار رمز عبور خودتو وارد کن"),check("phone").notEmpty().withMessage("لطفا شماره تلفن وارد کن").isMobilePhone().withMessage("شماره تلفن وارد شده معتبر نیست").isLength({min:11,max:11}).withMessage("شماره تلفن وارد شده معتبر نیست").custom((s,{req:t})=>db.execute("select phone from user").then(([e])=>{const r=[];if(e.map(e=>{r.push(e.phone)}),r.includes(s))return t.body.phoneDuplicated=!0}).catch(e=>console.log(e))),check("rulesCheck").notEmpty().withMessage("لطفا قوانین رو بخون و در صورت موافقت، دکمه موافقم رو کلیک کن"),check("dormitory").custom((e,{})=>{if(0==e)throw new Error("لطفا خوابگاهت رو انتخاب کن");return!0})],businessController.signInValidation),router.get("/login",pagesController.userLogin),router.post("/login",[check("user_id").notEmpty().withMessage("نام کاربری را وارد کن").custom((s,{req:t})=>db.execute("select user_id from user").then(([e])=>{const r=[];if(e.map(e=>{r.push(e.user_id)}),!r.includes(parseInt(s)))return t.body.incorrectUserId=!0})),check("password").notEmpty().withMessage("رمز عبور خود را وارد کنید").custom((r,{req:s})=>db.execute("select password from user where user_id = ?",[parseInt(s.body.user_id)]).then(([e])=>{if(0<e.length)return bcrypt.compare(r,e[0].password).then(e=>{if(!e)return s.body.incorrectPassword=!0}).catch(e=>console.log(e))}).catch(e=>console.log(e)))],businessController.userAuthentication),router.get("/main",isAuth,pagesController.mainPage),router.post("/main",check("number").notEmpty().withMessage("لطفا تعداد نان را مشخص کنید"),businessController.mainPost),router.get("/user-orders",isAuth,pagesController.userOrders),router.get("/cancel-orders",isAuth,pagesController.cancelOrders),router.post("/cancel-orders",isAuth,businessController.cancelOrderPost),router.get("/change-password",isAuth,pagesController.cancelOrders),router.get("/cart",isAuth,pagesController.cartPage),router.post("/cart",isAuth,businessController.removeFromCart),router.get("/comment",isAuth,pagesController.commentsPage),router.post("/comment",isAuth,businessController.commentPost),router.get("/express",isAuth,pagesController.expressGET),router.post("/express",isAuth,businessController.expressPOST),
router.get('/user', isAuth ,pagesController.userInformation)

module.exports=router;